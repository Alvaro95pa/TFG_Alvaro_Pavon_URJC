#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require_relative 'gameLexer'

class GameLanguage < Racc::Parser

module_eval(<<'...end gameParser.racc/module_eval...', 'gameParser.racc', 12)
  def parse(object, input)
    output = scan_str(input)
    if(output.kind_of?(Array))
    	object.public_send(delete_parenthesis(output[0]).to_sym, *(output.drop(1)))
    else
    	object.public_send(delete_parenthesis(output).to_sym)
    end
  end
  
  def delete_parenthesis(string)
  	string.tr('()', '')
  end
...end gameParser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,     5,     2,     3,     6,     7 ]

racc_action_check = [
     2,     2,     0,     1,     3,     5 ]

racc_action_pointer = [
     0,     3,    -3,     4,   nil,     1,   nil,   nil ]

racc_action_default = [
    -4,    -4,    -1,    -4,    -2,    -4,     8,    -3 ]

racc_goto_table = [
     1 ]

racc_goto_check = [
     1 ]

racc_goto_pointer = [
   nil,     0 ]

racc_goto_default = [
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 6, :_reduce_none,
  2, 6, :_reduce_2,
  3, 6, :_reduce_3 ]

racc_reduce_n = 4

racc_shift_n = 8

racc_token_table = {
  false => 0,
  :error => 1,
  :FUNCTION => 2,
  :WORD => 3,
  :DIGIT => 4 }

racc_nt_base = 5

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "FUNCTION",
  "WORD",
  "DIGIT",
  "$start",
  "expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'gameParser.racc', 3)
  def _reduce_2(val, _values, result)
     return val 
    result
  end
.,.,

module_eval(<<'.,.,', 'gameParser.racc', 4)
  def _reduce_3(val, _values, result)
     return val 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class GameLanguage
